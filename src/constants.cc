#include "constants.h"

#define SET(x) target->Set(String::NewSymbol(#x), Integer::New(x));

Persistent<Object> Constants() {
    Persistent<Object> target = Persistent<Object>::New(Object::New());
    
    // kex types
    SET(SSH_KEX);
    SET(SSH_HOSTKEYS);
    SET(SSH_CRYPT_C_S);
    SET(SSH_CRYPT_S_C);
    SET(SSH_MAC_C_S);
    SET(SSH_MAC_S_C);
    SET(SSH_COMP_C_S);
    SET(SSH_COMP_S_C);
    SET(SSH_LANG_C_S);
    SET(SSH_LANG_S_C);
     
    SET(SSH_CRYPT);
    SET(SSH_MAC);
    SET(SSH_COMP);
    SET(SSH_LANG);
    
    // auth
    SET(SSH_AUTH_SUCCESS);
    SET(SSH_AUTH_DENIED);
    SET(SSH_AUTH_PARTIAL);
    SET(SSH_AUTH_INFO);
    SET(SSH_AUTH_AGAIN);
    SET(SSH_AUTH_ERROR);
    
    // auth flags
    SET(SSH_AUTH_METHOD_UNKNOWN);
    SET(SSH_AUTH_METHOD_NONE);
    SET(SSH_AUTH_METHOD_PASSWORD);
    SET(SSH_AUTH_METHOD_PUBLICKEY);
    SET(SSH_AUTH_METHOD_HOSTBASED);
    SET(SSH_AUTH_METHOD_INTERACTIVE);
    
    // message requests
    SET(SSH_REQUEST_AUTH);
    SET(SSH_REQUEST_CHANNEL_OPEN);
    SET(SSH_REQUEST_CHANNEL);
    SET(SSH_REQUEST_SERVICE);
    SET(SSH_REQUEST_GLOBAL);
    
    // channel type
    SET(SSH_CHANNEL_UNKNOWN);
    SET(SSH_CHANNEL_SESSION);
    SET(SSH_CHANNEL_DIRECT_TCPIP);
    SET(SSH_CHANNEL_FORWARDED_TCPIP);
        Integer::New(SSH_CHANNEL_X11);
    
    // channel requests
    SET(SSH_CHANNEL_REQUEST_UNKNOWN);
    SET(SSH_CHANNEL_REQUEST_PTY);
    SET(SSH_CHANNEL_REQUEST_EXEC);
    SET(SSH_CHANNEL_REQUEST_SHELL);
    SET(SSH_CHANNEL_REQUEST_ENV);
    SET(SSH_CHANNEL_REQUEST_SUBSYSTEM);
    SET(SSH_CHANNEL_REQUEST_WINDOW_CHANGE);
    
    // global request
    SET(SSH_GLOBAL_REQUEST_UNKNOWN);
    SET(SSH_GLOBAL_REQUEST_TCPIP_FORWARD);
    SET(SSH_GLOBAL_REQUEST_CANCEL_TCPIP_FORWARD);
    
    // publickey state
    SET(SSH_PUBLICKEY_STATE_ERROR);
    SET(SSH_PUBLICKEY_STATE_NONE);
    SET(SSH_PUBLICKEY_STATE_VALID);
    SET(SSH_PUBLICKEY_STATE_WRONG);
    
    // status flags
    SET(SSH_CLOSED);
    SET(SSH_READ_PENDING);
    SET(SSH_CLOSED_ERROR);
    
    // server known messages
    SET(SSH_SERVER_ERROR);
    SET(SSH_SERVER_NOT_KNOWN);
    SET(SSH_SERVER_KNOWN_OK);
    SET(SSH_SERVER_KNOWN_CHANGED);
    SET(SSH_SERVER_FOUND_OTHER);
    SET(SSH_SERVER_FILE_NOT_FOUND);
    
    // error types
    SET(SSH_NO_ERROR);
    SET(SSH_REQUEST_DENIED);
    SET(SSH_FATAL);
    SET(SSH_EINTR);
    
    // key types
    SET(SSH_KEYTYPE_UNKNOWN);
    SET(SSH_KEYTYPE_DSS);
    SET(SSH_KEYTYPE_RSA);
    SET(SSH_KEYTYPE_RSA1);
    
    // error return codes
    SET(SSH_OK);
    SET(SSH_ERROR);
    SET(SSH_AGAIN);
    SET(SSH_EOF);
    
    // logging codes
    SET(SSH_LOG_NOLOG);
    SET(SSH_LOG_RARE);
    SET(SSH_LOG_PROTOCOL);
    SET(SSH_LOG_PACKET);
    SET(SSH_LOG_FUNCTIONS);
    
    // options why not
    SET(SSH_OPTIONS_HOST);
    SET(SSH_OPTIONS_PORT);
    SET(SSH_OPTIONS_PORT_STR);
    SET(SSH_OPTIONS_FD);
    SET(SSH_OPTIONS_USER);
    SET(SSH_OPTIONS_SSH_DIR);
    SET(SSH_OPTIONS_IDENTITY);
    SET(SSH_OPTIONS_ADD_IDENTITY);
    SET(SSH_OPTIONS_KNOWNHOSTS);
    SET(SSH_OPTIONS_TIMEOUT);
    SET(SSH_OPTIONS_TIMEOUT_USEC);
    SET(SSH_OPTIONS_SSH1);
    SET(SSH_OPTIONS_SSH2);
    SET(SSH_OPTIONS_LOG_VERBOSITY);
    SET(SSH_OPTIONS_LOG_VERBOSITY_STR);
    SET(SSH_OPTIONS_CIPHERS_C_S);
    SET(SSH_OPTIONS_CIPHERS_S_C);
    SET(SSH_OPTIONS_COMPRESSION_C_S);
    SET(SSH_OPTIONS_COMPRESSION_S_C);
    SET(SSH_OPTIONS_PROXYCOMMAND);
    SET(SSH_OPTIONS_BINDADDR);
    SET(SSH_OPTIONS_STRICTHOSTKEYCHECK);
    SET(SSH_OPTIONS_COMPRESSION);
    SET(SSH_OPTIONS_COMPRESSION_LEVEL);
    
    // scp constants
    SET(SSH_SCP_WRITE);
    SET(SSH_SCP_READ);
    SET(SSH_SCP_RECURSIVE);
    
    // request types
    SET(SSH_SCP_REQUEST_NEWDIR);
    SET(SSH_SCP_REQUEST_NEWFILE);
    SET(SSH_SCP_REQUEST_EOF);
    SET(SSH_SCP_REQUEST_ENDDIR);
    SET(SSH_SCP_REQUEST_WARNING);
    
    return target;
}

#undef SET
